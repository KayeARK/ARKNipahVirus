import random
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import numpy as np
import math
import seaborn as sns; sns.set()
import scipy.stats as stats
from scipy.stats import gamma

df = pd.read_excel (r'C:\Users\Alex\Desktop\URSS Project\Datasets.xlsx', sheet_name='Faridpur2004')
    

def SEIR(t, N, beta, epsilon, sigma, mu1, mu2, E, seasonstart, seasonend):
    global cumifmat
    global itaumat
    global cumdmat
    global dtaumat
    T=10000 #elapsed time
    itau=idays[0]
    dtau=ddays[0]
    I=cases[0] #intial number of infected individuals
    S=N-I #number of susceptibles
    R=0 #number of dead
    ift=I
    d=deaths[0]
    mu=1/(365*67) #natural birth and death rate
    itaumat=[idays[0]]
    dtaumat=[ddays[0]]
    cumifmat=[I]
    cumdmat=[d]

    
    while t < T:
        
        if I > 100:
            break
                 
        if t%365<seasonstart and t%365>seasonend:
            _epsilon=0
                           
        else:
            _epsilon=epsilon
            
        if I==0 and E==0 and _epsilon==0:
            break
                    
        N = S + E + I
        rate1 = (beta * I * S)/N #human to human transmission
        rate2 = sigma * E #move from exposed to infected
        rate3 = mu2 * I #disease induced death
        rate4 = mu1 * I #recovery from the disease and move back to susceptible
        rate5 = mu * N + mu2*I #birth rate
        rate6 = mu * S #natural death from susceptible class
        rate7 = mu * E #natural death from exposed class
        rate8 = mu * I #natural death from infectious class
        rate9 = _epsilon * S #transmission from bats
        ratemat = [rate1, rate2, rate3, rate4, rate5, rate6, rate7, rate8, rate9]
        ratetotal = sum(ratemat)
                    
        dt = -math.log(random.uniform(0,1))/ratetotal #timestep
        t = t + dt
                    
        r=random.uniform(0,1)    
                   
        if r < sum(ratemat [:1])/ratetotal: #move to infected class
            S = S - 1
            E = E + 1
                      
        elif sum(ratemat [:1])/ratetotal < r and r < sum(ratemat [:2])/ratetotal:
            E = E - 1
            I = I + 1
            ift = ift + 1
            itau=math.floor(t)
            itaumat.append(itau)
            cumifmat.append(ift)
                        
        elif sum(ratemat [:2])/ratetotal < r and r < sum(ratemat [:3])/ratetotal:
            I = I - 1
            R = R + 1
            d = d + 1
            dtau=math.floor(t)
            dtaumat.append(dtau)
            cumdmat.append(d)
                        
        elif sum(ratemat [:3])/ratetotal < r and r < sum(ratemat [:4])/ratetotal:
            I = I - 1
            S = S + 1
                        
        elif sum(ratemat [:4])/ratetotal < r and r < sum(ratemat [:5])/ratetotal:
            S = S + 1
                        
        elif sum(ratemat [:5])/ratetotal < r and r < sum(ratemat [:6])/ratetotal:
            S = S - 1
                        
        elif sum(ratemat [:6])/ratetotal < r and r < sum(ratemat [:7])/ratetotal:
            E = E - 1
                        
        elif sum(ratemat [:7])/ratetotal < r and r < sum(ratemat [:8])/ratetotal:
            I = I - 1
                                                  
        else:
            S = S - 1
            E = E + 1            


betamat=[]
epsilonmat=[]
sigmamat=[]
#mu1mat=[]
#mu2mat=[]
seasonstartmat=[]
seasonendmat=[]
Emat=[]
msemat=[]

mu1=((1/16)/(7/9))-(1/16)
mu2=1/16

iterations=200
'''
for b in range(iterations):

    mse=1000

    while mse>100:
        
        idays=[]
        ddays=[]
        cases=[]
        deaths=[]

        for i in range(len(df.index)):
            idays.append(df.loc[i, 'Day'])
            ddays.append(df.loc[i, 'Day'])
            cases.append(df.loc[i, 'Cumulative number of cases'])
            deaths.append(df.loc[i, 'Cumulative number of deaths'])
            
            
        E=random.randint(0,cases[-1])
        t=idays[0]
        N=df.loc[0,'Population']
        beta=random.uniform(0,0.2)
        epsilon=random.uniform(0,0.0006)
        sigma=random.uniform(0,1/4)
        seasonstart=random.uniform(181,364)
        seasonend=random.uniform(0,180)
        mu1=((1/16)/(7/9))-(1/16)
        mu2=1/16

        SEIR(t, N, beta, epsilon, sigma, mu1, mu2, E, seasonstart, seasonend)


        i=0

        while i < len(itaumat)-1:
            if itaumat[i]==itaumat[i+1]:
                del cumifmat[i]
                del itaumat[i]                
                                          
            elif itaumat[i]+1!=itaumat[i+1]:
                itaumat.insert(i+1, itaumat[i]+1)
                cumifmat.insert(i+1, cumifmat[i])

            else:
                i = i + 1                             
                                              
        while len(itaumat)<len(idays):
            itaumat.append(itaumat[-1]+1)
            cumifmat.append(cumifmat[-1])        
       
        while len(itaumat)>len(idays):
            idays.append(idays[-1]+1)
            cases.append(cases[-1])
            
            
        i=0
        
        while i < len(dtaumat)-1:
            if dtaumat[i]==dtaumat[i+1]:
                del cumdmat[i]
                del dtaumat[i]                
                                          
            elif dtaumat[i]+1!=dtaumat[i+1]:
                dtaumat.insert(i+1, dtaumat[i]+1)
                cumdmat.insert(i+1, cumdmat[i])

            else:
                i = i + 1                             
                                              
        while len(dtaumat)<len(ddays):
            dtaumat.append(dtaumat[-1]+1)
            cumdmat.append(cumdmat[-1])        
       
        while len(dtaumat)>len(ddays):
            ddays.append(ddays[-1]+1)
            deaths.append(deaths[-1])           

            

        caseserror=math.sqrt(np.sum((np.subtract(cases, cumifmat))**2))
#        deathserror=math.sqrt(np.sum((np.subtract(deaths, cumdmat))**2))
        mse=caseserror #+ deathserror
        
    
    betamat.append(beta)
    epsilonmat.append(epsilon)
    sigmamat.append(sigma)
#    mu1mat.append(mu1)
#    mu2mat.append(mu2)
    seasonstartmat.append(seasonstart)
    seasonendmat.append(seasonend)
    Emat.append(E)
    msemat.append(mse)
    #print(b)

 #   plt.scatter(idays, cases, c='k', s=2)
 #   plt.scatter(itaumat, cumifmat, c='b', s=2)
 #   plt.title("Cumulative Cases")





print('betamat1','=',list(betamat))
print('epsilonmat1','=',list(epsilonmat))
print('sigmamat1','=',list(sigmamat))
#print('mu1mat1','=',mu1mat)
#print('mu2mat1','=',mu2mat)
print('seasonstartmat1','=',list(seasonstartmat))
print('seasonendmat1','=',list(seasonendmat))
print('msemat1','=',list(msemat))
print('Emat1','=',list(Emat))



    

    

    

 #   plt.scatter(ddays, deaths, c='k', s=2)
 #   plt.scatter(dtaumat, cumdmat, c='b', s=2)
 #   plt.title("Cumulative Deaths")
    
#plt.show()
'''

betamat = [0.00393896, 0.00722787, 0.00480474, 0.00970811, 0.02297636, 0.01500103, 0.00471027, 0.0096235, 0.01168066, 0.01086653, 0.01220822, 0.00594625, 0.00495131, 0.01278931, 0.01694533, 0.02420055, 0.01268097, 0.01098919, 0.01065483, 0.01000791, 0.00671715, 0.02083833, 0.0190696, 0.01518306, 0.00680314, 0.01707652, 0.0054269, 0.03059236, 0.01204267, 0.03368945, 0.01004315, 0.01340039, 0.01195999, 0.01097924, 0.00554273, 0.00536708, 0.0027443, 0.0139534, 0.00342006, 0.0163794, 0.02956188, 0.02158759, 0.01411178, 0.01232011, 0.01365363, 0.03262037, 0.01606183, 0.00451561, 0.00574926, 0.01160942, 0.01466754, 0.02079691, 0.00489921, 0.0137095, 0.00281424, 0.00939012, 0.00357746, 0.00512523, 0.01050963, 0.00841553, 0.02986818, 0.00253798, 0.01990627, 0.01087403, 0.0163148, 0.01537973, 0.00374154, 0.01283031, 0.01060437, 0.00607638, 0.01110932, 0.0043696, 0.00422983, 0.02230977, 0.0113162, 0.00663968, 0.00270275, 0.01537166, 0.00800471, 0.01246061, 0.00281918, 0.01122303, 0.00895898, 0.01287675, 0.01720155, 0.00825555, 0.01036456, 0.02088735, 0.00509494, 0.00906076, 0.008119, 0.01803064, 0.01438404, 0.00604233, 0.00865866, 0.00370778, 0.0057757, 0.00685064, 0.01658782, 0.00669431, 0.00990905, 0.0103617, 0.0086451, 0.02773542, 0.01073569, 0.02198034, 0.01512802, 0.01622625, 0.02357584, 0.00780682, 0.00334386, 0.01409603, 0.01740162, 0.0093957, 0.01983049, 0.01438927, 0.01878924, 0.00387624, 0.01464645, 0.01569286, 0.00901956, 0.00449919, 0.00785938, 0.01329578, 0.004237, 0.0127154, 0.01303528, 0.02529556, 0.01119659, 0.03153545, 0.01089901, 0.01895264, 0.00991703, 0.01168394, 0.01104383, 0.00987188, 0.02047864, 0.0079952, 0.0225337, 0.01161979, 0.00549931, 0.01030462, 0.00550448, 0.00914193, 0.01129103, 0.01407365, 0.0199461, 0.00590707, 0.01399116, 0.00329912, 0.025013, 0.00948576, 0.00359884, 0.0124247, 0.01092127, 0.01271731, 0.00442483, 0.02192032, 0.01580495, 0.02155474, 0.01257146, 0.00965817, 0.01355019, 0.01647812, 0.01033968, 0.02006224, 0.00782448, 0.0245304, 0.00773538, 0.01055908, 0.01355802, 0.02050838, 0.0040999, 0.00351936, 0.00651622, 0.00813684, 0.01272304, 0.00699156, 0.02029362, 0.01036391, 0.01687158, 0.01822564, 0.00992783, 0.01114039, 0.00295722, 0.01154388, 0.01133038, 0.01829206, 0.00929815, 0.01287859, 0.02916256, 0.0115231, 0.0119589, 0.00826574, 0.00838688, 0.01294408, 0.01550784, 0.02083337, 0.0150602, 0.01444453]
epsilonmat = [0.00033694, 0.00033274, 0.00033477, 0.00036003, 0.00031989, 0.00030083, 0.00033768, 0.00036044, 0.00034777, 0.00031238, 0.00035836, 0.00038008, 0.00036668, 0.00033433, 0.00035784, 0.00037123, 0.00037414, 0.00033974, 0.00035986, 0.00033053, 0.00031668, 0.00035952, 0.00029388, 0.00036503, 0.00038077, 0.00035711, 0.00036506, 0.00037623, 0.00035746, 0.00034136, 0.00030206, 0.00035366, 0.0003764, 0.00035286, 0.0003642, 0.00029251, 0.0003772, 0.00035505, 0.00036054, 0.0003467, 0.00032809, 0.00035686, 0.00036394, 0.00038091, 0.00035327, 0.00033362, 0.00038043, 0.0003328, 0.00036632, 0.00037972, 0.00030819, 0.00036341, 0.00037692, 0.00038045, 0.000368, 0.00033923, 0.00036671, 0.00036851, 0.00034138, 0.00034318, 0.00035948, 0.00033869, 0.00030339, 0.00036014, 0.0003325, 0.0003729, 0.0003084, 0.00036345, 0.00036656, 0.00033213, 0.00035822, 0.00037287, 0.00035293, 0.00037055, 0.00034611, 0.0003785, 0.00034723, 0.00034579, 0.00037558, 0.00037263, 0.00037174, 0.00037741, 0.00035196, 0.00036403, 0.00036883, 0.00034225, 0.00036855, 0.00030163, 0.00034941, 0.00033957, 0.00033752, 0.00035182, 0.00029979, 0.00037636, 0.00035425, 0.00036284, 0.00036932, 0.00030256, 0.00033784, 0.00033603, 0.00036452, 0.00038043, 0.00036604, 0.00033181, 0.00036031, 0.00037992, 0.00036604, 0.00029301, 0.00033587, 0.00034127, 0.00037225, 0.00029461, 0.00037024, 0.00036092, 0.00033518, 0.00034014, 0.00033804, 0.00035502, 0.00034538, 0.00033027, 0.00033536, 0.00032831, 0.00037041, 0.00033455, 0.00037717, 0.00034373, 0.00035357, 0.00033109, 0.00033698, 0.00035621, 0.00035664, 0.00035642, 0.00037921, 0.00037718, 0.00036752, 0.00031039, 0.00037137, 0.00034141, 0.00034082, 0.00036756, 0.00036943, 0.00031646, 0.0003439, 0.00036507, 0.00029351, 0.00034748, 0.00033028, 0.00034234, 0.0003704, 0.00029818, 0.00033069, 0.0003608, 0.00037511, 0.00037488, 0.00033, 0.0002748, 0.00036923, 0.00032122, 0.00037251, 0.0003764, 0.00036507, 0.00032264, 0.00035971, 0.00036418, 0.00037722, 0.00032061, 0.00036074, 0.00034401, 0.00036505, 0.00034304, 0.00032182, 0.00029755, 0.00037233, 0.00034347, 0.00030674, 0.00037683, 0.00036535, 0.00035536, 0.00033271, 0.00034084, 0.00037353, 0.00034112, 0.00038045, 0.00035845, 0.00036701, 0.00032076, 0.00032938, 0.00033518, 0.00036296, 0.00036633, 0.00035901, 0.00034962, 0.00034301, 0.0003567, 0.00035623, 0.00035972, 0.00033135, 0.0003255, 0.00037633, 0.00033215]
sigmamat = [0.10621618, 0.09797989, 0.12100621, 0.11859387, 0.10737401, 0.11253508, 0.1460819, 0.11290983, 0.10862281, 0.10199155, 0.09129874, 0.1232573, 0.08811937, 0.07988322, 0.11263874, 0.09386485, 0.09277848, 0.1887142, 0.10483182, 0.18473213, 0.08329146, 0.1261171, 0.1554981, 0.08576959, 0.11407876, 0.10990869, 0.10157302, 0.10113009, 0.10956045, 0.08368392, 0.09550022, 0.1865947, 0.11155692, 0.10998649, 0.08443197, 0.11552292, 0.08690028, 0.11799068, 0.11427543, 0.08763183, 0.06988283, 0.10822664, 0.12888007, 0.10395107, 0.09419458, 0.10494999, 0.09655034, 0.1064389, 0.08481654, 0.08281025, 0.08870302, 0.11812271, 0.15486598, 0.10436318, 0.08111446, 0.09894106, 0.1011427, 0.09573478, 0.0986887, 0.14369131, 0.11303108, 0.10473314, 0.07828431, 0.08968447, 0.08192834, 0.10927733, 0.1230868, 0.08851617, 0.1279259, 0.12682375, 0.07907889, 0.10520065, 0.09236182, 0.13815971, 0.0996645, 0.11975758, 0.13685501, 0.08772369, 0.09892101, 0.11896544, 0.13794638, 0.09480134, 0.15995022, 0.11100269, 0.08596843, 0.09036694, 0.13216519, 0.10206802, 0.07798683, 0.08420222, 0.15212483, 0.15745182, 0.11238383, 0.12920712, 0.07911983, 0.09519738, 0.08050344, 0.08186463, 0.1005357, 0.17594039, 0.08724033, 0.06373665, 0.08818828, 0.09172726, 0.07724615, 0.19852517, 0.09811831, 0.11032722, 0.09020939, 0.07923975, 0.17926866, 0.09980154, 0.08650852, 0.11231882, 0.11630341, 0.06447511, 0.10588123, 0.17705796, 0.18188753, 0.0949209, 0.14738021, 0.0951274, 0.09758427, 0.12265256, 0.14299041, 0.07045663, 0.09173028, 0.07946751, 0.07722123, 0.07027523, 0.10768371, 0.08264779, 0.19847471, 0.10145968, 0.0890187, 0.08824322, 0.13357155, 0.0873773, 0.1031944, 0.08901315, 0.11738256, 0.08002114, 0.06725397, 0.08169534, 0.08869284, 0.09355333, 0.11619189, 0.08940431, 0.11060386, 0.1120778, 0.11051724, 0.11287012, 0.09194857, 0.07241209, 0.06434931, 0.15630652, 0.09890383, 0.11725799, 0.10079031, 0.08817857, 0.09391927, 0.18619411, 0.09059097, 0.07953718, 0.11512035, 0.09049257, 0.07513304, 0.09177148, 0.10931987, 0.09108357, 0.08920672, 0.15886553, 0.10285998, 0.09587593, 0.10388489, 0.1133565, 0.09370822, 0.15778263, 0.14548224, 0.10247859, 0.13021737, 0.10562655, 0.08074928, 0.0883803, 0.09002726, 0.11563144, 0.08465558, 0.07480525, 0.09870859, 0.09423349, 0.12830116, 0.10585317, 0.10152811, 0.11052012, 0.12600968, 0.07913253, 0.14588205, 0.08619233, 0.15281111, 0.19441683]
seasonstartmat = [256.67050743, 335.35859996, 253.58831359, 231.27948873, 252.60092683, 350.88205213, 234.60043719, 331.52965366, 248.86479429, 278.71795028, 305.95261004, 263.85847087, 227.61744478, 192.92397972, 246.39133753, 293.94718445, 336.2503941, 208.71111226, 300.89503297, 242.9564237, 242.63062123, 338.88482529, 285.17639188, 334.03519207, 300.87641507, 196.61020524, 309.90308852, 245.72918092, 197.66148351, 211.63403021, 194.83317865, 303.26959146, 204.43491671, 241.00088698, 347.67307418, 250.64735616, 235.96272588, 272.44258869, 303.2412228, 221.90139948, 306.14035054, 213.40144201, 298.19206904, 253.56385389, 341.97370369, 338.05768874, 218.99107953, 248.14842746, 304.71306722, 291.65127133, 261.37497185, 294.87868648, 319.8022877, 252.65357563, 241.8521799, 293.63490145, 299.93702184, 339.43829239, 312.02810889, 301.2519564, 304.01160193, 255.73927219, 200.7388954, 309.4975736, 261.27910951, 355.7246599, 256.68861362, 259.03965868, 237.27318343, 241.28073221, 325.74157447, 223.9655852, 210.08045455, 355.29572117, 209.46084134, 250.66468683, 345.81928986, 230.23091483, 239.64210575, 195.33332995, 253.0221063, 256.52401314, 211.5538208, 251.14024925, 196.59977546, 203.47786276, 216.50206875, 219.15046301, 300.63544599, 317.54998115, 196.49798555, 305.1656935, 302.28989237, 240.48447684, 192.09261854, 353.37068739, 249.33194484, 208.66001666, 254.49600082, 297.62905997, 236.25650471, 254.32724371, 347.21032506, 294.33838002, 207.58967112, 292.80877991, 349.57584603, 235.98914423, 250.75157435, 243.43297323, 256.5567036, 253.27939461, 330.22734568, 205.1700313, 247.26263215, 230.6587457, 324.51696999, 241.25840549, 344.82559079, 279.42260245, 345.31223866, 353.09302384, 245.43388814, 252.94949952, 255.78958291, 254.41585055, 297.4674076, 252.2834228, 344.94870953, 294.29084522, 256.28502338, 231.55861497, 241.16928434, 210.42229326, 340.39880669, 302.06931896, 340.02825333, 348.87111319, 305.81382494, 293.38434971, 249.97055865, 302.56710779, 246.14777015, 254.86783598, 337.19073245, 248.65639162, 352.09680449, 347.27513851, 253.58971959, 304.72701448, 349.24444444, 234.74546957, 211.5713977, 325.47772672, 325.55966692, 200.86133535, 341.11439176, 248.25960508, 255.91154316, 341.94178486, 249.96182653, 291.95977047, 323.20277739, 304.81089388, 199.26356017, 344.24268511, 249.40043975, 246.92388942, 219.36053341, 271.9529846, 193.39273138, 308.49007992, 293.43826142, 335.96382787, 250.89837363, 241.26966095, 324.47370695, 226.49887023, 221.38602148, 345.00266313, 329.83082118, 200.92681202, 295.79035014, 208.54856356, 224.08959074, 272.55329776, 253.81779802, 352.55797372, 335.3496244, 348.68299908, 249.15920691, 301.3038993, 296.65601275, 240.91128558, 343.73880446, 301.06735098, 225.98192621, 208.03546796, 313.95536197, 249.29799301]
seasonendmat = [107.8399947, 104.1484047, 105.35108016, 101.13661149, 98.4388427, 102.38607183, 103.73073537, 103.13142141, 99.81947835, 97.03494902, 102.41676047, 105.25224358, 99.90807342, 99.96283139, 106.93276889, 103.63464644, 100.38396553, 102.68416429, 99.460972, 103.45176839, 103.69512567, 106.06901231, 101.81374182, 100.43143669, 101.80426456, 101.70740946, 108.12627311, 100.62621783, 102.74772231, 99.85495471, 102.04335722, 108.9398444, 97.32898893, 103.00198067, 103.97908491, 96.71117178, 102.1792961, 99.94991853, 104.62751663, 105.34261418, 104.51531929, 100.41936122, 105.00906244, 102.37104277, 104.24928524, 108.337893, 101.50926966, 103.2826009, 99.67385063, 97.13546045, 105.04710979, 101.25780612, 106.73488386, 101.74594708, 100.62372495, 103.90415157, 105.87781225, 101.28852261, 102.49455665, 100.90533622, 102.49588242, 101.99422763, 104.36399313, 105.08772704, 101.640297, 100.16379705, 100.59127058, 101.05686274, 107.92450968, 101.7238404, 100.98857842, 102.92245749, 100.17725646, 104.46730173, 98.62536955, 97.13121395, 106.281585, 96.75027016, 99.26372776, 100.00318222, 109.47826218, 100.52778898, 105.22624172, 108.7203126, 104.17738135, 100.86712546, 100.32588759, 96.42568794, 101.85422258, 102.47010822, 101.26281864, 100.18984041, 100.3513813, 107.85677296, 101.23418226, 104.42309878, 99.87005921, 101.20906446, 100.92561748, 101.59140959, 104.3318804, 98.29642199, 109.32657867, 100.90789122, 99.6303594, 97.31440159, 106.99909267, 99.97056711, 99.16141991, 104.05384872, 110.44874664, 109.05411796, 101.11837058, 102.88524991, 101.45303512, 96.97259307, 105.1899054, 101.23210724, 101.33049501, 99.42658983, 98.00713809, 105.60817467, 102.36010711, 103.34098297, 102.42422037, 104.77185636, 107.9916326, 99.69387195, 101.89822369, 103.68014089, 104.14484065, 97.23434984, 99.89932752, 101.50588673, 103.2208882, 100.39553524, 98.86229338, 97.91967754, 101.25604297, 103.58645015, 102.60825305, 103.04192508, 103.44194548, 104.56574059, 97.82787798, 102.67948064, 102.82524643, 105.80289959, 104.47917859, 101.72587783, 105.90847535, 100.92726614, 103.70432535, 103.05621903, 97.9372053, 102.90900082, 108.85216064, 101.07934093, 100.70224155, 99.6260123, 108.55537666, 101.68525335, 103.40110537, 97.66320966, 105.95737337, 103.03910475, 97.73002983, 101.13838305, 99.77606718, 100.38420056, 98.86358205, 108.64549905, 107.62117529, 99.90559892, 100.96807848, 109.12926282, 101.10619824, 106.50048841, 98.72964744, 102.30963147, 103.60090442, 99.03489852, 99.99619151, 101.35993908, 107.307471, 99.54235475, 101.70324992, 98.2297321, 102.21091332, 109.09728875, 99.79119048, 110.13033101, 100.88025305, 107.80531009, 100.31904914, 105.8201376, 103.50070287, 99.32833367, 102.62825728, 103.90219331]
msemat = [29.748949561287034, 29.512709126747414, 30.919249667480614, 28.284271247461902, 24.474476501040833, 28.0178514522438, 30.4138126514911, 29.13760456866693, 27.910571473905726, 30.577769702841312, 31.064449134018133, 28.19574435974337, 19.05255888325765, 28.513154858766505, 20.663978319771825, 31.25699921617557, 23.388031127053, 30.903074280724887, 29.866369046136157, 31.28897569432403, 31.25699921617557, 30.919249667480614, 28.600699292150182, 28.89636655359978, 28.879058156387302, 30.18277654557314, 26.076809620810597, 29.748949561287034, 29.916550603303182, 27.586228448267445, 23.558437978779494, 30.740852297878796, 28.478061731796284, 27.94637722496424, 26.888659319497503, 25.357444666211933, 27.982137159266443, 29.866369046136157, 30.708305065568176, 29.563490998188964, 29.32575659723036, 23.916521486202797, 31.240998703626616, 31.25699921617557, 27.80287754891569, 22.978250586152114, 31.192947920964443, 28.19574435974337, 29.46183972531247, 24.124676163629637, 31.04834939252005, 29.410882339705484, 31.25699921617557, 27.147743920996454, 29.24038303442689, 26.038433132583073, 30.659419433511783, 28.635642126552707, 27.16615541441225, 30.364452901377952, 31.04834939252005, 27.92848008753788, 30.886890422961002, 28.21347195933177, 21.95449840010015, 29.376861643136763, 30.692018506445613, 29.93325909419153, 30.773365106858236, 27.51363298439521, 27.964262908219126, 28.089143810376278, 25.865034312755125, 29.189039038652847, 30.854497241083024, 29.29163703175362, 30.528675044947494, 30.495901363953813, 28.77498913987632, 25.65151067676132, 30.430248109405877, 25.436194683953808, 30.643106892089126, 28.5657137141714, 30.083217912982647, 27.820855486487112, 29.206163733020468, 31.016124838541646, 29.866369046136157, 29.393876913398138, 26.60826939130014, 25.436194683953808, 29.206163733020468, 23.430749027719962, 26.28687885618983, 29.58039891549808, 30.528675044947494, 30.347981810987037, 31.240998703626616, 30.983866769659336, 30.166206257996713, 31.11269837220809, 31.080540535840107, 27.477263328068172, 29.376861643136763, 29.614185789921695, 26.77685567799177, 29.32575659723036, 28.372521918222215, 31.11269837220809, 30.692018506445613, 26.343879744638983, 30.495901363953813, 29.017236257093817, 27.92848008753788, 27.53179979587241, 29.732137494637012, 30.215889859476256, 19.672315572906, 26.795522013948524, 28.21347195933177, 27.23967694375247, 27.258026340878022, 26.248809496813376, 30.93541659651604, 26.5329983228432, 29.017236257093817, 22.293496809607955, 28.844410203711913, 28.372521918222215, 27.76688675382964, 29.966648127543394, 28.337254630609507, 29.274562336608895, 31.12876483254676, 30.495901363953813, 30.59411708155671, 29.916550603303182, 29.563490998188964, 30.14962686336267, 30.83828789021855, 30.95157508108432, 29.171904291629644, 27.712812921102035, 28.61817604250837, 26.645825188948457, 30.116440692751194, 28.879058156387302, 27.40437921208944, 27.184554438136374, 30.610455730027933, 30.93541659651604, 27.910571473905726, 30.870698080866262, 30.805843601498726, 29.664793948382652, 31.144823004794873, 27.748873851023216, 28.948229652260256, 26.851443164195103, 30.0, 30.757112998459398, 29.0, 27.294688127912362, 28.39013913315678, 30.54504869860253, 28.178005607210743, 29.916550603303182, 29.866369046136157, 28.548204847240395, 30.675723300355934, 29.189039038652847, 27.258026340878022, 31.0322412983658, 30.430248109405877, 27.53179979587241, 25.69046515733026, 26.038433132583073, 25.079872407968907, 29.832867780352597, 28.142494558940577, 30.116440692751194, 26.570660511172846, 29.0516780926679, 26.962937525425527, 30.265491900843113, 22.737634001804146, 26.095976701399778, 24.454038521274967, 31.12876483254676, 30.757112998459398, 22.338307903688676, 27.568097504180443, 29.93325909419153, 30.93541659651604, 30.347981810987037, 28.231188426986208, 26.77685567799177, 28.35489375751565, 30.740852297878796]
Emat = [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1]


betamatABC=betamat
epsilonmatABC=epsilonmat
sigmamatABC=sigmamat
#mu1matABC=mu1mat
#mu2matABC=mu2mat
seasonstartmatABC=seasonstartmat
seasonendmatABC=seasonendmat
msematABC=msemat
EmatABC=Emat


for c in range(50):
    
    msemat=[]
    betamat=[]
    epsilonmat=[]
    sigmamat=[]
#    mu1mat=[]
#    mu2mat=[]
    seasonstartmat=[]
    seasonendmat=[]
    Emat=[]
    
    mse_=np.median(msematABC)

    for b in range(iterations):

        mse=1000

        while mse>mse_:
            
            idays=[]
            ddays=[]
            cases=[]
            deaths=[]

            for i in range(len(df.index)):
                idays.append(df.loc[i, 'Day'])
                ddays.append(df.loc[i, 'Day'])
                cases.append(df.loc[i, 'Cumulative number of cases'])
                deaths.append(df.loc[i, 'Cumulative number of deaths']) 
            
                                   
            E=random.choice(EmatABC)
            t=idays[0]
            N=df.loc[0,'Population']
            
            histbeta,binsbeta = np.histogram(betamatABC)
            bin_midpointsbeta = binsbeta[:-1]+np.diff(binsbeta)/2
            cdfbeta=np.cumsum(histbeta)
            cdfbeta=cdfbeta / cdfbeta[-1]
            valuesbeta = np.random.rand(1)
            value_binsbeta = np.searchsorted(cdfbeta,valuesbeta)
            beta = bin_midpointsbeta[value_binsbeta] + random.uniform((binsbeta[0]-binsbeta[1])/2,(binsbeta[1]-binsbeta[0])/2)

            histepsilon,binsepsilon = np.histogram(epsilonmatABC)
            bin_midpointsepsilon = binsepsilon[:-1]+np.diff(binsepsilon)/2
            cdfepsilon=np.cumsum(histepsilon)
            cdfepsilon=cdfepsilon / cdfepsilon[-1]
            valuesepsilon = np.random.rand(1)
            value_binsepsilon = np.searchsorted(cdfepsilon,valuesepsilon)
            epsilon = bin_midpointsepsilon[value_binsepsilon] + random.uniform((binsepsilon[0]-binsepsilon[1])/2,(binsepsilon[1]-binsepsilon[0])/2)

            histsigma,binssigma = np.histogram(sigmamatABC)
            bin_midpointssigma = binssigma[:-1]+np.diff(binssigma)/2
            cdfsigma=np.cumsum(histsigma)
            cdfsigma=cdfsigma / cdfsigma[-1]
            valuessigma = np.random.rand(1)
            value_binssigma = np.searchsorted(cdfsigma,valuessigma)
            sigma = bin_midpointssigma[value_binssigma] + random.uniform((binssigma[0]-binssigma[1])/2,(binssigma[1]-binssigma[0])/2)

#            histmu1,binsmu1 = np.histogram(mu1matABC)
#            bin_midpointsmu1 = binsmu1[:-1]+np.diff(binsmu1)/2
#            cdfmu1=np.cumsum(histmu1)
#            cdfmu1=cdfmu1 / cdfmu1[-1]
#            valuesmu1 = np.random.rand(1)
#            value_binsmu1 = np.searchsorted(cdfmu1,valuesmu1)
#            mu1 = bin_midpointsmu1[value_binsmu1] + random.uniform((binsmu1[0]-binsmu1[1])/2,(binsmu1[1]-binsmu1[0])/2)

#            histmu2,binsmu2 = np.histogram(mu2matABC)
#            bin_midpointsmu2 = binsmu2[:-1]+np.diff(binsmu2)/2
#            cdfmu2=np.cumsum(histmu2)
#            cdfmu2=cdfmu2 / cdfmu2[-1]
#            valuesmu2 = np.random.rand(1)
#            value_binsmu2 = np.searchsorted(cdfmu2,valuesmu2)
#            mu2 = bin_midpointsmu2[value_binsmu2] + random.uniform((binsmu2[0]-binsmu2[1])/2,(binsmu2[1]-binsmu2[0])/2)

            
            histseasonstart,binsseasonstart = np.histogram(seasonstartmatABC)
            bin_midpointsseasonstart = binsseasonstart[:-1]+np.diff(binsseasonstart)/2
            cdfseasonstart=np.cumsum(histseasonstart)
            cdfseasonstart=cdfseasonstart / cdfseasonstart[-1]
            valuesseasonstart = np.random.rand(1)
            value_binsseasonstart = np.searchsorted(cdfseasonstart,valuesseasonstart)
            seasonstart = bin_midpointsseasonstart[value_binsseasonstart] + random.uniform((binsseasonstart[0]-binsseasonstart[1])/2,(binsseasonstart[1]-binsseasonstart[0])/2)


            histseasonend,binsseasonend = np.histogram(seasonendmatABC)
            bin_midpointsseasonend = binsseasonend[:-1]+np.diff(binsseasonend)/2
            cdfseasonend=np.cumsum(histseasonend)
            cdfseasonend=cdfseasonend / cdfseasonend[-1]
            valuesseasonend = np.random.rand(1)
            value_binsseasonend = np.searchsorted(cdfseasonend,valuesseasonend)
            seasonend = bin_midpointsseasonend[value_binsseasonend] + random.uniform((binsseasonend[0]-binsseasonend[1])/2,(binsseasonend[1]-binsseasonend[0])/2)

         
            SEIR(t, N, beta, epsilon, sigma, mu1, mu2, E, seasonstart, seasonend)

            i=0

            while i < len(itaumat)-1:
                if itaumat[i]==itaumat[i+1]:
                    del cumifmat[i]
                    del itaumat[i]                
                                              
                elif itaumat[i]+1!=itaumat[i+1]:
                    itaumat.insert(i+1, itaumat[i]+1)
                    cumifmat.insert(i+1, cumifmat[i])

                else:
                    i = i + 1                             
                                                  
            while len(itaumat)<len(idays):
                itaumat.append(itaumat[-1]+1)
                cumifmat.append(cumifmat[-1])        
           
            while len(itaumat)>len(idays):
                idays.append(idays[-1]+1)
                cases.append(cases[-1])
                
                
            i=0
            
            while i < len(dtaumat)-1:
                if dtaumat[i]==dtaumat[i+1]:
                    del cumdmat[i]
                    del dtaumat[i]                
                                              
                elif dtaumat[i]+1!=dtaumat[i+1]:
                    dtaumat.insert(i+1, dtaumat[i]+1)
                    cumdmat.insert(i+1, cumdmat[i])

                else:
                    i = i + 1                             
                                                  
            while len(dtaumat)<len(ddays):
                dtaumat.append(dtaumat[-1]+1)
                cumdmat.append(cumdmat[-1])        
           
            while len(dtaumat)>len(ddays):
                ddays.append(ddays[-1]+1)
                deaths.append(deaths[-1])           

            

            caseserror=math.sqrt(np.sum((np.subtract(cases, cumifmat))**2))
#            deathserror=math.sqrt(np.sum((np.subtract(deaths, cumdmat))**2))
            mse=caseserror #+ deathserror
            
       
        betamat.append(beta)
        epsilonmat.append(epsilon)
        sigmamat.append(sigma)
#        mu1mat.append(mu1)
#        mu2mat.append(mu2)
        seasonstartmat.append(seasonstart)
        seasonendmat.append(seasonend)
        Emat.append(E)
        msemat.append(mse)
        #print(b)
        
       # plt.scatter(idays, cases, c='k', s=2)
       # plt.scatter(itaumat, cumifmat, c='b', s=2)
        #plt.title("Cumulative Cases")
   

    
    betamatABC=betamat
    epsilonmatABC=epsilonmat
    sigmamatABC=sigmamat
#    mu1matABC=mu1mat
#    mu2matABC=mu2mat
    seasonstartmatABC=seasonstartmat
    seasonendmatABC=seasonendmat
    msematABC=msemat
    EmatABC=Emat

    print('betamat',c+2,'=',list(betamat))
    print('epsilonmat',c+2,'=',list(epsilonmat))
    print('sigmamat',c+2,'=',list(sigmamat))
#    print('mu1mat',c+2,'=',mu1mat)
#    print('mu2mat',c+2,'=',mu2mat)
    print('seasonstartmat',c+2,'=',list(seasonstartmat))
    print('seasonendmat',c+2,'=',list(seasonendmat))
    print('msemat',c+2,'=',list(msemat))
    print('Emat',c+2,'=',list(Emat))
    

#plt.show()  

# HISTOGRAM #

#plt.hist(sigmamat, density=1)
#plt.show()