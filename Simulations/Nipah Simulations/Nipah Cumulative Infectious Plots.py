import random
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import numpy as np
import math
import seaborn as sns; sns.set()

df = pd.read_excel (r'C:\Users\Alex\Desktop\URSS Project\Datasets.xlsx', sheet_name='Faridpur2004')
    

def SEIR(t, N, beta, epsilon, sigma, mu1, mu2, E):
    global cumifmat
    global taumat
    T=1000 #elapsed time
    tau=days[0]
    I=cases[0] #intial number of infected individuals
    S=N-I #number of susceptibles
    R=0 #number of dead
    ift=I
    mu=1/(365*67) #natural birth and death rate
    taumat=[days[0]]
    cumifmat=[I]

    
    while t < T:
                 
        if t%365<304 and t%365>120:
            _epsilon=0
                           
        else:
            _epsilon=epsilon
            
        if I==0 and E==0 and _epsilon==0:
            break
                    
        N = S + E + I
        rate1 = (beta * I * S)/N #human to human transmission
        rate2 = sigma * E #move from exposed to infected
        rate3 = mu2 * I #disease induced death
        rate4 = mu1 * I #recovery from the disease and move back to susceptible
        rate5 = mu * N + mu2*I #birth rate
        rate6 = mu * S #natural death from susceptible class
        rate7 = mu * E #natural death from exposed class
        rate8 = mu * I #natural death from infectious class
        rate9 = _epsilon * S #transmission from bats
        ratemat = [rate1, rate2, rate3, rate4, rate5, rate6, rate7, rate8, rate9]
        ratetotal = sum(ratemat)
                    
        dt = -math.log(random.uniform(0,1))/ratetotal #timestep
        t = t + dt
                    
        r=random.uniform(0,1)    
                   
        if r < sum(ratemat [:1])/ratetotal: #move to infected class
            S = S - 1
            E = E + 1
                      
        elif sum(ratemat [:1])/ratetotal < r and r < sum(ratemat [:2])/ratetotal:
            E = E - 1
            I = I + 1
            ift = ift + 1
            tau=math.floor(t)
            taumat.append(tau)
            cumifmat.append(ift)
                        
        elif sum(ratemat [:2])/ratetotal < r and r < sum(ratemat [:3])/ratetotal:
            I = I - 1
            R = R + 1
                        
        elif sum(ratemat [:3])/ratetotal < r and r < sum(ratemat [:4])/ratetotal:
            I = I - 1
            S = S + 1
                        
        elif sum(ratemat [:4])/ratetotal < r and r < sum(ratemat [:5])/ratetotal:
            S = S + 1
                        
        elif sum(ratemat [:5])/ratetotal < r and r < sum(ratemat [:6])/ratetotal:
            S = S - 1
                        
        elif sum(ratemat [:6])/ratetotal < r and r < sum(ratemat [:7])/ratetotal:
            E = E - 1
                        
        elif sum(ratemat [:7])/ratetotal < r and r < sum(ratemat [:8])/ratetotal:
            I = I - 1
                                                  
        else:
            S = S - 1
            E = E + 1            

betamat=[]
epsilonmat=[]
sigmamat=[]
mu1mat=[]
mu2mat=[]
Emat=[]
msemat=[]

for b in range(1):
    

    

        
    days=[]
    cases=[]

    for i in range(len(df.index)):
        days.append(df.loc[i, 'Day'])
        cases.append(df.loc[i, 'Cumulative number of cases'])
                
                
    E=1
    t=days[0]
    N=df.loc[0,'Population']
    
    betamat = [0.01650592, 0.10718759, 0.09760949, 0.11415231, 0.14396846, 0.17596065, 0.14961813, 0.16105895, 0.01767499, 0.15920226, 0.04577056, 0.08646584, 0.0822742, 0.12714688, 0.14739226, 0.15409201, 0.15669047, 0.09031135, 0.14621274, 0.07922403, 0.06044308, 0.20837643, 0.07770103, 0.17623133, 0.06347607, 0.12995801, 0.15308895, 0.08669199, 0.14131376, 0.03700669, 0.17368859, 0.04108722, 0.12674842, 0.14250317, 0.08387951, 0.04404779, 0.16225713, 0.06348584, 0.17113426, 0.09719076, 0.10311853, 0.07638587, 0.21636865, 0.08465597, 0.11419705, 0.05473289, 0.03392167, 0.15828527, 0.11400119, 0.02416443, 0.11230626, 0.08555756, 0.17149272, 0.13070993, 0.05635332, 0.14047354, 0.05339408, 0.13944371, 0.13855423, 0.02442347, 0.08956357, 0.08178972, 0.13133656, 0.14701429, 0.11365863, 0.0188185, 0.03031879, 0.12175118, 0.14583138, 0.02336865, 0.15891786, 0.09217571, 0.0696299, 0.1216654, 0.21743753, 0.20982881, 0.12632366, 0.04070502, 0.21642794, 0.06620352, 0.13240607, 0.03737851, 0.07575603, 0.16165894, 0.22265205, 0.15654699, 0.16437975, 0.16547018, 0.11893714, 0.04767337, 0.09678943, 0.15252858, 0.19315051, 0.14964851, 0.19677649, 0.20723742, 0.13099878, 0.15860504, 0.09337324, 0.09584921, 0.09053761, 0.11739436, 0.21681356, 0.16191453, 0.11816965, 0.11444285, 0.21788057, 0.11200741, 0.02445701, 0.06625628, 0.0446559, 0.03455187, 0.04248864, 0.13276487, 0.12875053, 0.16189964, 0.13166409, 0.10427858, 0.07278659, 0.09156464, 0.14799841, 0.02625351, 0.12965086, 0.06267557, 0.02043967, 0.07207182, 0.0913648, 0.03656798, 0.09571278, 0.05143263, 0.20423846, 0.17891542, 0.02006747, 0.0698623, 0.11764733, 0.21463643, 0.05183678, 0.16030195, 0.09048018, 0.05000218, 0.07925048, 0.13944425, 0.09357223, 0.07602794, 0.07390166, 0.09908813, 0.14851989, 0.09998386, 0.13409513, 0.16057832, 0.15526112, 0.11361161, 0.12223328, 0.12974902, 0.15419928, 0.14655109, 0.08135177, 0.07398601, 0.18004348, 0.11901816, 0.1451708, 0.10089171, 0.1481904, 0.12368876, 0.22417513, 0.14885298, 0.15531167, 0.04586178, 0.12737097, 0.03712869, 0.0852372, 0.04821648, 0.13611688, 0.0450085, 0.08351638, 0.21932287, 0.07806985, 0.1496149, 0.18217391, 0.16213824, 0.16173716, 0.13673476, 0.04390852, 0.08672818, 0.12220174, 0.07339085, 0.18638585, 0.10662565, 0.05219246, 0.09703633, 0.05485059, 0.17707711, 0.05354848, 0.11602107, 0.09197057, 0.12729913, 0.10817272, 0.0234009, 0.09698455, 0.06570504]
    epsilonmat = [0.00034892, 0.00034043, 0.00035367, 0.00031152, 0.0003325, 0.00033407, 0.00027181, 0.00031938, 0.00031131, 0.00030079, 0.00032306, 0.00034558, 0.00033265, 0.00033934, 0.00030828, 0.0003121, 0.00031302, 0.00029308, 0.00034966, 0.00030415, 0.00034712, 0.00034691, 0.00029048, 0.00028858, 0.00033087, 0.00033443, 0.00030295, 0.00030234, 0.00035618, 0.0003391, 0.00032781, 0.0003537, 0.00032371, 0.00033066, 0.00031279, 0.00033659, 0.00029576, 0.00035698, 0.00026187, 0.00032032, 0.00028343, 0.0002962, 0.00030989, 0.00027526, 0.00031566, 0.0003422, 0.00027948, 0.00037817, 0.00034818, 0.00031879, 0.00032993, 0.00031553, 0.0003481, 0.00035532, 0.00034544, 0.0002575, 0.00029731, 0.00030715, 0.00034787, 0.00034929, 0.00034072, 0.00032899, 0.00028082, 0.0003558, 0.00033182, 0.00032285, 0.00032767, 0.00034227, 0.0003563, 0.00034996, 0.00035492, 0.00034985, 0.00031014, 0.00034207, 0.00028935, 0.00025315, 0.00032072, 0.00034374, 0.00029058, 0.00034462, 0.0003439, 0.00030281, 0.00030769, 0.00031369, 0.0002758, 0.00027367, 0.00035212, 0.00027886, 0.00030685, 0.00033164, 0.00031413, 0.00031334, 0.00030172, 0.00030039, 0.00035027, 0.00028302, 0.00028563, 0.00032509, 0.00029889, 0.00034893, 0.00034012, 0.00030757, 0.00032161, 0.00025486, 0.00035132, 0.00035502, 0.00029156, 0.00030741, 0.00037543, 0.00035178, 0.00029323, 0.00033282, 0.00027479, 0.00035521, 0.00034818, 0.00033076, 0.00033228, 0.00034035, 0.00030634, 0.00030093, 0.0003014, 0.00027839, 0.00027987, 0.00033636, 0.00034524, 0.00032521, 0.00033007, 0.00029306, 0.00035589, 0.00029948, 0.00032317, 0.0003217, 0.00029903, 0.00028889, 0.00035321, 0.000343, 0.00028688, 0.00032146, 0.00030934, 0.00032833, 0.00031307, 0.00034344, 0.00031315, 0.00029743, 0.00032906, 0.00032994, 0.00025283, 0.00034026, 0.00029533, 0.00029957, 0.00031871, 0.00030947, 0.00034097, 0.00025432, 0.00028843, 0.00031049, 0.00027243, 0.0003262, 0.00030432, 0.00035646, 0.00025026, 0.00034712, 0.00030957, 0.00034181, 0.00035603, 0.00031863, 0.0003168, 0.00031322, 0.00033556, 0.00027683, 0.00027979, 0.00032633, 0.00031532, 0.00035538, 0.00033598, 0.00031876, 0.00037785, 0.00029039, 0.00034365, 0.00031543, 0.00035586, 0.00029528, 0.00032088, 0.00032972, 0.00033646, 0.00038197, 0.00031377, 0.00030866, 0.00034317, 0.00034649, 0.00033989, 0.00031532, 0.00033426, 0.00031465, 0.00035539, 0.00033093, 0.0002859, 0.00034596, 0.00031679, 0.000343]
    sigmamat = [0.1078327, 0.10536206, 0.12352325, 0.10815526, 0.10270848, 0.13814975, 0.13235496, 0.12729166, 0.10578227, 0.11379947, 0.13651741, 0.15703423, 0.10616934, 0.15864016, 0.11711887, 0.12299092, 0.13954935, 0.16041165, 0.15999626, 0.15571348, 0.1233822, 0.13006008, 0.14388072, 0.11634563, 0.09915304, 0.10603175, 0.1260702, 0.1357825, 0.16723112, 0.15887994, 0.12113052, 0.15998294, 0.12610464, 0.14020207, 0.14962454, 0.12088821, 0.16238322, 0.15729199, 0.14453135, 0.13133655, 0.13011367, 0.12044494, 0.11013818, 0.13726622, 0.12262344, 0.12942567, 0.09697399, 0.16121447, 0.13718379, 0.16371607, 0.14021496, 0.13801976, 0.14309832, 0.10759599, 0.13061647, 0.10225643, 0.13108461, 0.12346214, 0.09986498, 0.13697025, 0.14204209, 0.12616496, 0.16097958, 0.11684359, 0.10677004, 0.12437766, 0.14368415, 0.10914636, 0.14117695, 0.12240254, 0.15297603, 0.12199944, 0.12288471, 0.13693731, 0.12143646, 0.14867636, 0.12090936, 0.10660912, 0.12364117, 0.12181588, 0.15664799, 0.11406629, 0.10503488, 0.12593202, 0.11392721, 0.13877265, 0.12369599, 0.13144619, 0.12262092, 0.11243804, 0.12660502, 0.16120444, 0.14820458, 0.11651881, 0.11699451, 0.15748236, 0.11672804, 0.12713367, 0.13964814, 0.11343556, 0.15372291, 0.13564081, 0.16001717, 0.1139943, 0.1438225, 0.13887095, 0.11454773, 0.1515324, 0.12658048, 0.09249307, 0.13520187, 0.15949997, 0.11501332, 0.16116154, 0.16219026, 0.14370858, 0.12669941, 0.14594055, 0.11107988, 0.1464764, 0.12058736, 0.13485071, 0.10807041, 0.144654, 0.12895982, 0.11824812, 0.10445759, 0.12230756, 0.11932097, 0.14422603, 0.13862433, 0.15492159, 0.1006305, 0.11642388, 0.14690366, 0.11538728, 0.1095595, 0.13291435, 0.1549154, 0.14139779, 0.13554503, 0.12625772, 0.13247564, 0.12326854, 0.14154626, 0.14202062, 0.13096192, 0.12501293, 0.149868, 0.12375641, 0.15526327, 0.1434899, 0.13825091, 0.11394477, 0.14335276, 0.1321372, 0.16024587, 0.13691147, 0.1119422, 0.12500604, 0.13313386, 0.09407389, 0.11849952, 0.11299921, 0.1166575, 0.1128061, 0.129922, 0.11433192, 0.12518644, 0.14645905, 0.11319925, 0.11894512, 0.13179997, 0.11670824, 0.1283356, 0.16400011, 0.14170747, 0.12808027, 0.12457676, 0.12133587, 0.13079148, 0.1000908, 0.12674205, 0.14089802, 0.13817874, 0.12302171, 0.12453319, 0.13022496, 0.11588009, 0.14449404, 0.14168759, 0.12311577, 0.13517561, 0.12651446, 0.12464412, 0.12356592, 0.13501563, 0.14477274, 0.11986419, 0.13970927]
    mu1mat = [0.30377252, 0.20839501, 0.29850461, 0.20825159, 0.27598377, 0.30552633, 0.22003142, 0.2717817, 0.35475462, 0.22454023, 0.25210861, 0.21892287, 0.32355661, 0.2590286, 0.24308911, 0.356598, 0.33987898, 0.24492661, 0.37891245, 0.2869549, 0.21429184, 0.19691436, 0.37221876, 0.24464581, 0.26047585, 0.13693041, 0.18881581, 0.22195192, 0.17978717, 0.31928251, 0.15203119, 0.16597169, 0.33272301, 0.18144096, 0.20604077, 0.22109412, 0.25273298, 0.20211768, 0.24678088, 0.1793934, 0.22888326, 0.3393697, 0.3547213, 0.31652248, 0.22412362, 0.26070016, 0.18980544, 0.31598984, 0.21492543, 0.33297738, 0.33852797, 0.23751881, 0.22374647, 0.20797469, 0.28109294, 0.27577465, 0.30747204, 0.16365571, 0.2058394, 0.30255099, 0.26822142, 0.29744132, 0.25395452, 0.2303762, 0.17637874, 0.36531568, 0.31130526, 0.31169105, 0.28431806, 0.19346042, 0.31435212, 0.29902981, 0.30392972, 0.38753799, 0.19826553, 0.38177067, 0.31186634, 0.24955993, 0.30130578, 0.28537194, 0.3551597, 0.32167573, 0.20575284, 0.17651951, 0.26642913, 0.32254301, 0.24209091, 0.32054214, 0.19047337, 0.15103184, 0.38769663, 0.18166424, 0.23418549, 0.32061314, 0.30681902, 0.30141842, 0.29838523, 0.14782531, 0.27512403, 0.1096763, 0.28768903, 0.31775569, 0.26861736, 0.20341602, 0.25995767, 0.19011609, 0.27969161, 0.20859067, 0.30048916, 0.28586766, 0.29499422, 0.33180711, 0.28354668, 0.14541598, 0.17664441, 0.35975204, 0.33976413, 0.27183887, 0.11212462, 0.31823296, 0.30579459, 0.26355783, 0.24896351, 0.28040225, 0.13644331, 0.22859198, 0.27760308, 0.2508862, 0.34834631, 0.19774085, 0.20688809, 0.37687553, 0.35682883, 0.23233158, 0.26049294, 0.26718618, 0.3178771, 0.30457836, 0.25236487, 0.2872481, 0.31954095, 0.28262362, 0.23048045, 0.12691365, 0.27402521, 0.28434652, 0.35693649, 0.30177149, 0.34034191, 0.36360788, 0.39748358, 0.31522052, 0.16400699, 0.32164993, 0.30701716, 0.24343111, 0.21371624, 0.28744461, 0.19559862, 0.27062942, 0.3807674, 0.37955686, 0.37265114, 0.27363072, 0.18033561, 0.38566941, 0.33093147, 0.25452605, 0.22721693, 0.36873904, 0.24543862, 0.25690051, 0.26104662, 0.35499823, 0.27689715, 0.25816499, 0.34954608, 0.30144069, 0.23134268, 0.24049065, 0.30469484, 0.14341992, 0.3144509, 0.25462247, 0.35774686, 0.31119757, 0.23717047, 0.14614228, 0.26288831, 0.2612954, 0.27413364, 0.22413561, 0.24804489, 0.2408299, 0.11138613, 0.19785764, 0.23721519, 0.24845578, 0.21888382, 0.29862568]
    mu2mat = [0.92760715, 0.85693956, 0.93473115, 0.91911684, 0.93197313, 0.95445843, 0.93338052, 0.97185886, 0.83684084, 0.89672388, 0.94714697, 0.75984408, 0.84040651, 0.91732804, 0.75816561, 0.76007967, 0.91107521, 0.84967904, 0.90267883, 0.91979223, 0.82380868, 0.76726038, 0.86910651, 0.73825766, 0.91332039, 0.92359958, 0.83882913, 0.94532049, 0.64268851, 0.91615687, 0.78988174, 0.92667891, 0.93987333, 0.97529586, 0.89501898, 0.94504104, 0.87146286, 0.79850415, 0.91464423, 0.67542895, 0.85943639, 0.93262175, 0.90335095, 0.92611591, 0.90630429, 0.63955677, 0.65849284, 0.61666244, 0.83859868, 0.78624642, 0.81478404, 0.93904569, 0.93556529, 0.92870769, 0.80174664, 0.81593032, 0.93212398, 0.9674731, 0.9197038, 0.78703584, 0.8010841, 0.96881826, 0.79508869, 0.89457471, 0.95596762, 0.81116202, 0.9139593, 0.90531505, 0.92816162, 0.80950189, 0.96104949, 0.91453164, 0.75503377, 0.85027161, 0.96137685, 0.93963303, 0.96718036, 0.80960185, 0.85087011, 0.81949886, 0.85319136, 0.88927197, 0.82900785, 0.94013292, 0.91314995, 0.91053549, 0.76932883, 0.81979584, 0.89218032, 0.86982826, 0.85133227, 0.8326211, 0.80966268, 0.83816576, 0.79870469, 0.86492324, 0.85695446, 0.83098086, 0.79352076, 0.77552284, 0.93141949, 0.80523906, 0.82446553, 0.8695453, 0.69888644, 0.75827907, 0.62935295, 0.7808271, 0.82897449, 0.86261054, 0.88854204, 0.90723004, 0.89999509, 0.93736292, 0.8274642, 0.86300045, 0.82127342, 0.74062382, 0.80426299, 0.8235028, 0.94481494, 0.95955662, 0.91406665, 0.83044759, 0.94594672, 0.85241595, 0.96834971, 0.77581079, 0.88708847, 0.76604715, 0.901126, 0.79462206, 0.80825919, 0.947214, 0.93677812, 0.77606176, 0.86599955, 0.94335202, 0.83241328, 0.90568912, 0.93282716, 0.8561878, 0.92474615, 0.76946554, 0.75493624, 0.92395934, 0.91997149, 0.81724725, 0.90593156, 0.76854, 0.85801225, 0.87465594, 0.80283256, 0.85369328, 0.84611263, 0.80312798, 0.82911916, 0.91867501, 0.80434285, 0.94195599, 0.93511652, 0.87948791, 0.92189602, 0.78995, 0.79326795, 0.92216592, 0.79220646, 0.89181725, 0.74079509, 0.83293763, 0.90558199, 0.62244785, 0.87961007, 0.9076949, 0.91835741, 0.79307042, 0.60981829, 0.9354555, 0.91711753, 0.80962142, 0.85653682, 0.90584095, 0.97431203, 0.96549229, 0.95201112, 0.65818732, 0.83526002, 0.6124985, 0.83589831, 0.86220205, 0.66342076, 0.87634304, 0.77441275, 0.91343787, 0.87652127, 0.87991748, 0.96100612, 0.88823054, 0.83932108, 0.70596603]

    
    
    histbeta,binsbeta = np.histogram(betamat)
    bin_midpointsbeta = binsbeta[:-1]+np.diff(binsbeta)/2
    cdfbeta=np.cumsum(histbeta)
    cdfbeta=cdfbeta / cdfbeta[-1]
    valuesbeta = np.random.rand(1)
    value_binsbeta = np.searchsorted(cdfbeta,valuesbeta)
    beta = bin_midpointsbeta[value_binsbeta] + random.uniform((binsbeta[0]-binsbeta[1])/2,(binsbeta[1]-binsbeta[0])/2)

    histepsilon,binsepsilon = np.histogram(epsilonmat)
    bin_midpointsepsilon = binsepsilon[:-1]+np.diff(binsepsilon)/2
    cdfepsilon=np.cumsum(histepsilon)
    cdfepsilon=cdfepsilon / cdfepsilon[-1]
    valuesepsilon = np.random.rand(1)
    value_binsepsilon = np.searchsorted(cdfepsilon,valuesepsilon)
    epsilon = bin_midpointsepsilon[value_binsepsilon] + random.uniform((binsepsilon[0]-binsepsilon[1])/2,(binsepsilon[1]-binsepsilon[0])/2)

    histsigma,binssigma = np.histogram(sigmamat)
    bin_midpointssigma = binssigma[:-1]+np.diff(binssigma)/2
    cdfsigma=np.cumsum(histsigma)
    cdfsigma=cdfsigma / cdfsigma[-1]
    valuessigma = np.random.rand(1)
    value_binssigma = np.searchsorted(cdfsigma,valuessigma)
    sigma = bin_midpointssigma[value_binssigma] + random.uniform((binssigma[0]-binssigma[1])/2,(binssigma[1]-binssigma[0])/2)

    histmu1,binsmu1 = np.histogram(mu1mat)
    bin_midpointsmu1 = binsmu1[:-1]+np.diff(binsmu1)/2
    cdfmu1=np.cumsum(histmu1)
    cdfmu1=cdfmu1 / cdfmu1[-1]
    valuesmu1 = np.random.rand(1)
    value_binsmu1 = np.searchsorted(cdfmu1,valuesmu1)
    mu1 = bin_midpointsmu1[value_binsmu1] + random.uniform((binsmu1[0]-binsmu1[1])/2,(binsmu1[1]-binsmu1[0])/2)

    histmu2,binsmu2 = np.histogram(mu2mat)
    bin_midpointsmu2 = binsmu2[:-1]+np.diff(binsmu2)/2
    cdfmu2=np.cumsum(histmu2)
    cdfmu2=cdfmu2 / cdfmu2[-1]
    valuesmu2 = np.random.rand(1)
    value_binsmu2 = np.searchsorted(cdfmu2,valuesmu2)
    mu2 = bin_midpointsmu2[value_binsmu2] + random.uniform((binsmu2[0]-binsmu2[1])/2,(binsmu2[1]-binsmu2[0])/2)


    SEIR(t, N, beta, epsilon, sigma, mu1, mu2, E)


    i=0

    while i < len(cumifmat)-1:
        if taumat[i]==taumat[i+1]:
            del cumifmat[i]
            del taumat[i]
                                   
        elif taumat[i]+1!=taumat[i+1]:
            taumat.insert(i+1, taumat[i]+1)
            cumifmat.insert(i+1, cumifmat[i])

        else:
            i = i + 1
                              
    while len(taumat)>len(days):
        days.append(days[-1]+1)
        cases.append(cases[-1])
                    
    while len(taumat)<len(days):
        taumat.append(taumat[-1]+1)
        cumifmat.append(cumifmat[-1])
                    

            
       
    betamat.append(beta)
    epsilonmat.append(epsilon)
    sigmamat.append(sigma)
    mu1mat.append(mu1)
    mu2mat.append(mu2)
    Emat.append(E)
        
        
    plt.scatter(taumat, cumifmat, c='b', s=2)    
    plt.scatter(days, cases, c='k', s=2)
plt.show()


# HISTOGRAM #

#plt.hist(Emat, density=1)
#plt.show()
