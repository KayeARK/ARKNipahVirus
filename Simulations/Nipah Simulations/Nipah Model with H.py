import math
import random
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import numpy as np
from matplotlib.lines import Line2D

timemat=[]
ifbmat=[]
ifhmat=[]
ifmat=[]
deadmat=[]

for i in range(10000):
    
    a=0
    
    while a < 10:    

   
        N=1500 #population of village
        T=1000 #elapsed time

        t=50
        
        
        betamat = [0.01254335, 0.0114376, 0.04111491, 0.04856783, 0.05450354, 0.05205034, 0.01006544, 0.05284063, 0.04112526, 0.01144378, 0.05971752, 0.01722848, 0.0243828, 0.01700506, 0.0210804, 0.04337357, 0.041158, 0.03336331, 0.00559629, 0.04633671, 0.00500728, 0.04050171, 0.01293186, 0.00989163, 0.02239827, 0.04267504, 0.04306492, 0.03260587, 0.06340106, 0.03495871, 0.06758883, 0.01692678, 0.00680181, 0.01059798, 0.0371707, 0.02316517, 0.04177806, 0.01062898, 0.02220825, 0.05899435, 0.05594548, 0.02156612, 0.06645895, 0.02612793, 0.00801629, 0.04124558, 0.02010336, 0.03942431, 0.024416, 0.04322561, 0.01542387, 0.02419442, 0.01906509, 0.0143907, 0.00924538, 0.0641106, 0.03116913, 0.05507918, 0.05650013, 0.02402771, 0.01664832, 0.07641051, 0.01398909, 0.06888158, 0.00736397, 0.01314794, 0.06457173, 0.0773376, 0.04076174, 0.01873987, 0.00481337, 0.02762065, 0.02275166, 0.06602433, 0.01823007, 0.00736907, 0.00911524, 0.08147452, 0.04282484, 0.03277511, 0.03455891, 0.03618267, 0.01934912, 0.03898375, 0.03405151, 0.00863373, 0.04587338, 0.04280789, 0.00617008, 0.05221156, 0.04718204, 0.00960049, 0.0709859, 0.01015196, 0.02266883, 0.02922674, 0.02604013, 0.0152279, 0.04110119, 0.0054459, 0.03794761, 0.01346725, 0.03796276, 0.03751074, 0.01270924, 0.05648913, 0.00611048, 0.02793013, 0.01008076, 0.08155177, 0.01239414, 0.00753032, 0.05024642, 0.0384759, 0.00454604, 0.05765267, 0.05543696, 0.04835811, 0.0673474, 0.00927, 0.00607737, 0.00447664, 0.02387381, 0.03161915, 0.04570337, 0.04296916, 0.01168167, 0.04392752, 0.02575402, 0.01604869, 0.03749256, 0.0617776, 0.01432259, 0.04390984, 0.03813921, 0.05688372, 0.01503321, 0.04346544, 0.00486863, 0.04004155, 0.06567506, 0.01224268, 0.03822707, 0.02491928, 0.06679349, 0.00775268, 0.02243258, 0.00573887, 0.01555149, 0.00901518, 0.03850894, 0.04103563, 0.01759268, 0.05401405, 0.04292547, 0.00751849, 0.03738649, 0.01386169, 0.00999948, 0.02777934, 0.04216439, 0.00971127, 0.0072522, 0.05277736, 0.01164457, 0.00556775, 0.04379132, 0.03515263, 0.0484595, 0.06722457, 0.03203593, 0.01752675, 0.00981592, 0.03746023, 0.08154382, 0.01725286, 0.06539511, 0.00768343, 0.05717758, 0.03345001, 0.01376342, 0.03277677, 0.04770148, 0.01165909, 0.05108267, 0.04318094, 0.02523763, 0.02070858, 0.05042112, 0.01821058, 0.03602658, 0.0396376, 0.00569837, 0.03632561, 0.03661477, 0.04384402, 0.07621706, 0.0179057, 0.06248033, 0.04241617]
        epsilonmat = [0.00029423, 0.0002714, 0.00024488, 0.00029416, 0.00028037, 0.00027804, 0.00027197, 0.00025089, 0.00029103, 0.00027434, 0.00028637, 0.00024907, 0.00028709, 0.00027306, 0.00026044, 0.00027435, 0.00022452, 0.00026089, 0.00025958, 0.00023869, 0.00029117, 0.00028991, 0.00027506, 0.00026954, 0.00027952, 0.00024163, 0.00028176, 0.00026968, 0.00029458, 0.00026794, 0.0002865, 0.00025636, 0.00026422, 0.00027911, 0.00025751, 0.00025696, 0.0002581, 0.00023589, 0.00025393, 0.0002777, 0.00029175, 0.00025407, 0.00025875, 0.00027721, 0.0002565, 0.00026192, 0.00029015, 0.00027812, 0.00029062, 0.00029137, 0.00026898, 0.00025778, 0.00028162, 0.00026497, 0.00023753, 0.00022861, 0.00026775, 0.0002813, 0.000291, 0.00024936, 0.00028336, 0.00028832, 0.000279, 0.00025801, 0.00025603, 0.00026098, 0.00024121, 0.00024703, 0.00027477, 0.00027845, 0.00025534, 0.0002619, 0.00027773, 0.00025403, 0.00026913, 0.0002443, 0.00023157, 0.00027345, 0.00026081, 0.00027189, 0.00026454, 0.00028236, 0.00027221, 0.00023767, 0.00029396, 0.00023932, 0.00029241, 0.00027899, 0.00025629, 0.00023908, 0.00026652, 0.00025732, 0.00024809, 0.0002545, 0.00026291, 0.00024805, 0.00029517, 0.0002572, 0.00028236, 0.0002927, 0.00027083, 0.00027583, 0.00023501, 0.00025646, 0.0002764, 0.00027846, 0.00024032, 0.00028389, 0.00027627, 0.00025548, 0.00027814, 0.00025703, 0.00025925, 0.00026319, 0.00025945, 0.00028899, 0.00027138, 0.00027543, 0.00029235, 0.00025577, 0.00027885, 0.00026354, 0.00029255, 0.00025743, 0.00023031, 0.00025801, 0.00024515, 0.0002401, 0.00026153, 0.0002478, 0.00029153, 0.00028776, 0.00028923, 0.0002809, 0.00024211, 0.00026277, 0.00023821, 0.00025455, 0.00027769, 0.00024855, 0.00025923, 0.00027563, 0.0002364, 0.0002755, 0.00025053, 0.00028742, 0.00026987, 0.00027334, 0.00029173, 0.00024669, 0.00026924, 0.00025222, 0.00022453, 0.00025421, 0.00024728, 0.00023218, 0.00027299, 0.00028086, 0.00026381, 0.00025582, 0.00026367, 0.00021432, 0.00027029, 0.00027683, 0.00023992, 0.00023605, 0.00023142, 0.00026719, 0.00028404, 0.00027755, 0.00025965, 0.00027276, 0.00023903, 0.00028735, 0.00027391, 0.00024997, 0.00026871, 0.00023914, 0.00026762, 0.00027129, 0.00024804, 0.00029582, 0.00023166, 0.00027279, 0.00024216, 0.00026699, 0.00026584, 0.0002147, 0.00028487, 0.00026638, 0.00025587, 0.00027246, 0.00029202, 0.00028776, 0.00023749, 0.0002579, 0.00027611, 0.00026358, 0.00022816, 0.00024169]
        sigmamat = [0.09357234, 0.10369222, 0.09000858, 0.11620757, 0.09106943, 0.10969076, 0.07412496, 0.07888122, 0.09183484, 0.09078891, 0.08393538, 0.07499134, 0.08204328, 0.07662748, 0.08548594, 0.07190977, 0.11849548, 0.07982027, 0.1259225, 0.08593389, 0.07243023, 0.09478056, 0.08173515, 0.09405643, 0.08954836, 0.09230451, 0.09628057, 0.08636907, 0.07616374, 0.07883869, 0.08683604, 0.08052539, 0.09362807, 0.08160796, 0.09492926, 0.0854976, 0.07880424, 0.08093543, 0.08473559, 0.0925495, 0.09528901, 0.08818552, 0.08976547, 0.0904102, 0.09608831, 0.08544276, 0.09723384, 0.09372086, 0.08870457, 0.09176488, 0.07176752, 0.08958887, 0.08576958, 0.08643153, 0.0857328, 0.07762977, 0.09967209, 0.08991243, 0.07496765, 0.09233301, 0.07270277, 0.07165235, 0.08211033, 0.09480535, 0.07365887, 0.09616832, 0.09198442, 0.09241342, 0.0822614, 0.10012529, 0.08517418, 0.09139967, 0.08056549, 0.09996521, 0.07315587, 0.1265399, 0.0964629, 0.08350339, 0.09259966, 0.08070564, 0.10265771, 0.07497813, 0.0981649, 0.09467631, 0.09761517, 0.09189702, 0.07852893, 0.07545794, 0.07554894, 0.0912668, 0.09056182, 0.07493894, 0.09244869, 0.0920198, 0.08941984, 0.07485225, 0.08189139, 0.12029004, 0.07707954, 0.07975646, 0.07532131, 0.09402021, 0.07207425, 0.07807731, 0.08301333, 0.09749738, 0.09329851, 0.0723287, 0.08841055, 0.0956879, 0.0971619, 0.09446258, 0.09077529, 0.09800289, 0.08976986, 0.09433239, 0.09313764, 0.10534646, 0.09092028, 0.10556481, 0.09275468, 0.10497464, 0.07808981, 0.09668291, 0.09791043, 0.08584034, 0.09524413, 0.07556221, 0.08478918, 0.09472158, 0.08304001, 0.0738471, 0.08586878, 0.09300339, 0.07547433, 0.08861639, 0.08101063, 0.10021684, 0.07427614, 0.08788533, 0.07278699, 0.12637678, 0.10534196, 0.09459928, 0.11214066, 0.07300341, 0.08753588, 0.07541753, 0.09186646, 0.08944277, 0.09402259, 0.09935327, 0.08814754, 0.07422298, 0.09725375, 0.08219433, 0.08822681, 0.09279335, 0.08566816, 0.07947424, 0.09071119, 0.08999411, 0.07629598, 0.0924327, 0.08574139, 0.08533239, 0.08487057, 0.07550035, 0.07642859, 0.0720886, 0.09063705, 0.0879065, 0.0954682, 0.0786513, 0.07902657, 0.09555684, 0.08892037, 0.07401549, 0.1292878, 0.10400896, 0.10224554, 0.09068435, 0.09371561, 0.08342866, 0.08203546, 0.07328372, 0.08458477, 0.09687346, 0.08942261, 0.09146287, 0.0780864, 0.09191157, 0.08541473, 0.09434645, 0.08570883, 0.09752376, 0.09332967, 0.09523239, 0.07572286, 0.07985189]
        msemat = [32.54228019054596, 37.30951621235526, 36.193922141707716, 35.77708763999664, 37.094473981982816, 35.749125863438955, 37.16180835212409, 37.094473981982816, 35.73513677041127, 35.156791662493895, 29.79932885150268, 36.945906403822335, 32.55764119219941, 31.701734968294716, 37.26929030716845, 34.08812109811862, 36.15245496505044, 36.864617182333525, 35.369478367654786, 33.12099032335839, 36.40054944640259, 37.107950630558946, 31.622776601683793, 37.14835124201342, 36.98648401781386, 36.864617182333525, 36.61966684720111, 35.608987629529715, 35.270384177096794, 33.391615714128, 37.242448899072144, 34.249087579087416, 35.53871128783372, 36.60601043544625, 34.292856398964496, 36.72873534441391, 33.24154027718932, 28.460498941515414, 36.60601043544625, 35.12833614050059, 32.54228019054596, 35.35533905932738, 37.242448899072144, 36.90528417449187, 35.874782229304195, 33.645207682521445, 33.71943060017473, 29.376861643136763, 35.35533905932738, 27.640549922170507, 37.107950630558946, 32.89376840679705, 33.0, 35.76310948449533, 36.61966684720111, 34.62657938636157, 37.027017163147235, 35.832945734337834, 33.19638534539566, 36.207733980463345, 33.421549934136806, 36.823905279043935, 36.76955262170047, 35.888716889852724, 37.094473981982816, 37.282703764614496, 36.91882988394946, 32.51153641401772, 35.91656999213594, 35.4400902933387, 36.851051545376556, 37.17526059088221, 35.21363372331802, 36.40054944640259, 36.837480912787726, 32.0, 36.6742416417845, 34.45286635390443, 32.95451410656816, 36.959437225152655, 34.741905532080416, 35.7211421989835, 37.30951621235526, 35.86084215408221, 33.0, 34.11744421846396, 33.734255586866, 36.87817782917155, 31.144823004794873, 36.76955262170047, 34.17601498127012, 36.08323710533743, 32.41913015489465, 35.199431813596085, 31.096623610932426, 37.33630940518894, 32.37282811247729, 35.63705936241092, 35.369478367654786, 35.4682957019364, 33.61547262794322, 33.436506994600975, 30.870698080866262, 36.810324638611924, 35.7211421989835, 33.98529093593286, 34.713109915419565, 34.0147027033899, 35.0, 30.528675044947494, 32.58834147360065, 34.79942528261063, 34.828149534535996, 37.376463182061514, 33.31666249791537, 35.08560958569767, 35.11409973215888, 34.87119154832539, 31.54362059117501, 35.31288716601915, 29.832867780352597, 28.879058156387302, 31.38470965295043, 33.406586176980134, 35.76310948449533, 33.77869150810907, 32.89376840679705, 36.16628264005025, 36.6333181680284, 34.45286635390443, 36.0, 33.83784863137726, 35.66510900025401, 35.38361202590826, 33.391615714128, 35.958309192730404, 35.31288716601915, 37.20215047547655, 33.8673884437522, 34.0, 34.42382895611701, 33.896902513356586, 36.98648401781386, 33.734255586866, 35.76310948449533, 36.837480912787726, 37.296112397943034, 33.645207682521445, 36.9729630946723, 32.863353450309965, 32.41913015489465, 36.66060555964672, 37.26929030716845, 35.91656999213594, 36.864617182333525, 34.48187929913333, 34.785054261852174, 33.58571124749333, 36.235341863986875, 35.4259791678367, 36.90528417449187, 33.704599092705436, 37.36308338453881, 34.51086785347479, 35.91656999213594, 36.4828726939094, 36.124783736376884, 35.59494346111537, 35.73513677041127, 34.27827300200522, 34.23448553724738, 34.77067730142742, 36.22154055254967, 32.0624390837628, 34.55430508634199, 35.874782229304195, 36.013886210738214, 35.86084215408221, 37.3496987939662, 30.04995840263344, 34.044089061098404, 34.48187929913333, 31.496031496047245, 31.984371183438952, 37.282703764614496, 35.02855977627399, 36.55133376499413, 36.09709129556009, 35.4964786985977, 31.32091952673165, 37.134889255254286, 33.926390907374746, 33.015148038438355, 37.027017163147235, 36.578682316343766, 36.71511950137164, 37.3496987939662, 33.77869150810907, 37.26929030716845, 29.93325909419153]
        Emat = [5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5]
        alphamat = [0.18093257, 0.22330257, 0.10495233, 0.10706474, 0.16730735, 0.09040922, 0.1010131, 0.13622978, 0.14724212, 0.12640257, 0.20174894, 0.25906366, 0.13734911, 0.17348013, 0.17806943, 0.09499775, 0.2487264, 0.23422309, 0.08948702, 0.59731841, 0.15944148, 0.3690391, 0.14114194, 0.22342961, 0.28103349, 0.29889873, 0.31181776, 0.22568067, 0.24863271, 0.10047657, 0.06862088, 0.22359482, 0.21879533, 0.2833389, 0.25774806, 0.21646745, 0.58436205, 0.31652985, 0.23606815, 0.13759096, 0.10420436, 0.26381235, 0.28018617, 0.22963591, 0.12736184, 0.18341592, 0.2283229, 0.18781113, 0.2212381, 0.12549299, 0.25303842, 0.09053848, 0.16601294, 0.1587365, 0.25068979, 0.42580232, 0.10409938, 0.28081564, 0.10089744, 0.11814471, 0.10820878, 0.22758377, 0.05561304, 0.24493334, 0.23117832, 0.19977137, 0.223881, 0.22350117, 0.25693828, 0.55777931, 0.171358, 0.05109328, 0.13009985, 0.21158174, 0.58920984, 0.16672146, 0.57692218, 0.18837225, 0.14356869, 0.10229476, 0.1057688, 0.10938177, 0.26055491, 0.21962045, 0.17920771, 0.18530555, 0.1409345, 0.29904201, 0.24598105, 0.26650201, 0.27235746, 0.26170222, 0.10636568, 0.29311432, 0.10514225, 0.23653096, 0.40308579, 0.31590706, 0.08125015, 0.25447858, 0.25509381, 0.07922365, 0.31922758, 0.15145967, 0.05313918, 0.2252361, 0.11919363, 0.14638443, 0.05821017, 0.13442988, 0.18443564, 0.14837474, 0.14359785, 0.23563259, 0.0852548, 0.29338367, 0.22980595, 0.24923842, 0.04819434, 0.06337661, 0.1170034, 0.21999109, 0.1723218, 0.10265954, 0.25786388, 0.23650574, 0.26817304, 0.23480004, 0.21765164, 0.30664973, 0.11840498, 0.0978573, 0.23739571, 0.21877717, 0.12621526, 0.04512896, 0.17135994, 0.22966773, 0.18281155, 0.27346777, 0.2475381, 0.40458939, 0.14621243, 0.21245528, 0.09135858, 0.14467151, 0.11905449, 0.12935415, 0.05294504, 0.09603309, 0.24125062, 0.12143981, 0.24395849, 0.22889241, 0.17727039, 0.13564863, 0.22647757, 0.26209891, 0.23810435, 0.07406295, 0.32302876, 0.2599745, 0.17583658, 0.3363601, 0.12425172, 0.28656852, 0.21088643, 0.10727061, 0.12162741, 0.13966477, 0.26716136, 0.04379828, 0.09664114, 0.19340015, 0.20399937, 0.19217769, 0.23942177, 0.46418452, 0.25322425, 0.15569151, 0.12740969, 0.28566315, 0.04509429, 0.21538889, 0.17164661, 0.1614864, 0.11144564, 0.19793553, 0.19897107, 0.22009191, 0.10698748, 0.07910636, 0.21409112, 0.07091888, 0.10371941, 0.25714035, 0.0712272, 0.25660064, 0.18896685, 0.26133486]
        omegamat = [92.13843188, 31.44060783, 7.32357353, 25.72903539, 28.9953108, 35.75029384, 23.09459257, 48.12141597, 89.66552272, 21.14672699, 39.86081213, 37.46852666, 7.76379796, 40.83049847, 35.35227977, 91.1669527, 11.94312632, 26.65905636, 30.20997816, 54.11300256, 23.44000379, 47.76229645, 26.8303161, 50.42234253, 44.67864877, 30.77236905, 23.29991201, 53.4013089, 59.56677821, 25.69963446, 44.0043175, 8.35779326, 62.83686769, 22.68538326, 64.07570563, 40.9361991, 63.88326439, 49.72382455, 48.08740715, 89.002154, 15.68944193, 64.92022837, 91.97827644, 86.52069871, 61.81724485, 88.14529396, 43.99517228, 85.35340956, 39.51633988, 27.96421485, 23.40103931, 44.12777557, 29.01575662, 48.70907309, 91.42335643, 56.35809873, 13.25825846, 64.808734, 41.52143548, 42.47325238, 92.49404133, 43.97944604, 5.43756908, 85.96463262, 46.09875292, 41.04035817, 14.15724938, 56.64688411, 91.13976915, 91.23088587, 38.71597405, 39.5872099, 12.85296776, 44.56387286, 31.12704999, 44.69932027, 40.68122812, 54.90877882, 22.21791982, 88.61887648, 60.38128862, 89.19751433, 58.81259333, 86.67355797, 45.1649489, 86.75478963, 92.29676552, 90.0318513, 19.13480003, 90.33478657, 36.5849136, 41.06809344, 66.34515585, 90.52198725, 90.74908911, 26.2033927, 62.85974502, 21.33914233, 23.0760762, 87.23833656, 36.52060387, 87.33768812, 67.17232512, 77.61968281, 27.04032604, 35.2205369, 43.7148773, 47.27156499, 12.1974273, 89.7490345, 59.0837967, 24.73264105, 50.18088419, 88.36979216, 32.35087174, 10.84382274, 85.95593828, 24.55231947, 19.5744959, 93.51585905, 24.80450479, 88.90361015, 41.98031013, 86.75577882, 84.19886124, 46.8256221, 20.30433214, 62.18710786, 29.55389086, 27.16688464, 8.73384516, 45.66216939, 89.15518145, 18.49179863, 36.82528001, 36.90471219, 59.31988747, 87.25028788, 18.41328608, 12.47439608, 12.14604507, 49.95824225, 17.26683999, 35.30421857, 64.20718956, 88.84492366, 21.64778872, 56.65432092, 28.55146166, 31.10366173, 44.22585073, 86.52297053, 30.31380959, 45.37415107, 67.09896663, 46.88387904, 59.46721505, 20.70112503, 44.85018346, 94.00116294, 64.32169406, 47.3122171, 59.13845195, 41.71197942, 10.81450548, 63.30812826, 89.0654846, 82.58981058, 46.9957997, 53.40847076, 20.8526307, 28.26378873, 53.64462378, 64.40040249, 35.43249654, 25.37631448, 53.14450415, 92.25408237, 61.20778014, 44.33611836, 48.36896902, 22.71329966, 25.59433148, 29.27941773, 90.64061111, 45.62701655, 91.81673425, 93.7104931, 93.14794725, 87.99641715, 30.35840037, 82.58296977, 86.83249605, 82.81116432, 15.29869398, 37.77710615, 26.66212302, 80.14937611, 63.19242462, 44.99354265]
       
        
        histbeta,binsbeta = np.histogram(betamat)
        bin_midpointsbeta = binsbeta[:-1]+np.diff(binsbeta)/2
        cdfbeta=np.cumsum(histbeta)
        cdfbeta=cdfbeta / cdfbeta[-1]
        valuesbeta = np.random.rand(1)
        value_binsbeta = np.searchsorted(cdfbeta,valuesbeta)
        beta = bin_midpointsbeta[value_binsbeta] + random.uniform((binsbeta[0]-binsbeta[1])/2,(binsbeta[1]-binsbeta[0])/2)

        histepsilon,binsepsilon = np.histogram(epsilonmat)
        bin_midpointsepsilon = binsepsilon[:-1]+np.diff(binsepsilon)/2
        cdfepsilon=np.cumsum(histepsilon)
        cdfepsilon=cdfepsilon / cdfepsilon[-1]
        valuesepsilon = np.random.rand(1)
        value_binsepsilon = np.searchsorted(cdfepsilon,valuesepsilon)
        epsilon = bin_midpointsepsilon[value_binsepsilon] + random.uniform((binsepsilon[0]-binsepsilon[1])/2,(binsepsilon[1]-binsepsilon[0])/2)

        histsigma,binssigma = np.histogram(sigmamat)
        bin_midpointssigma = binssigma[:-1]+np.diff(binssigma)/2
        cdfsigma=np.cumsum(histsigma)
        cdfsigma=cdfsigma / cdfsigma[-1]
        valuessigma = np.random.rand(1)
        value_binssigma = np.searchsorted(cdfsigma,valuessigma)
        sigma = bin_midpointssigma[value_binssigma] + random.uniform((binssigma[0]-binssigma[1])/2,(binssigma[1]-binssigma[0])/2)

        histalpha,binsalpha = np.histogram(alphamat)
        bin_midpointsalpha = binsalpha[:-1]+np.diff(binsalpha)/2
        cdfalpha=np.cumsum(histalpha)
        cdfalpha=cdfalpha / cdfalpha[-1]
        valuesalpha = np.random.rand(1)
        value_binsalpha = np.searchsorted(cdfalpha,valuesalpha)
        alpha = bin_midpointsalpha[value_binsalpha] + random.uniform((binsalpha[0]-binsalpha[1])/2,(binsalpha[1]-binsalpha[0])/2)

        histomega,binsomega = np.histogram(omegamat)
        bin_midpointsomega = binsomega[:-1]+np.diff(binsomega)/2
        cdfomega=np.cumsum(histomega)
        cdfomega=cdfomega / cdfomega[-1]
        valuesomega = np.random.rand(1)
        value_binsomega = np.searchsorted(cdfomega,valuesomega)
        omega = bin_midpointsomega[value_binsomega] + random.uniform((binsomega[0]-binsomega[1])/2,(binsomega[1]-binsomega[0])/2)
        
      

        mu1=((1/16)/(7/9))-(1/16) #recovery rate
        mu2=1/16 #disease induced death rate
        mu=1/(365*64) #natural birth and death rate
        E=random.choice(Emat) #intial number of infected individuals
        S=N-E #number of susceptibles
        I=1 #number of exposed
        R=0 #number of dead
        H=0
        inputSEIHR = [S, E, I, H, R]

        SEIHR = []
        SEIHR.append([t, S, E, I, H, R]) #array of SEIR values
                
        ifb=0 #infection from bats
        ifh=0 #infection from human to human

        #main loop
        while t < T:
                    
            if t%365<304 and t%365>120:
                _epsilon=0
                           
            else:
                _epsilon=epsilon
            
            if I==0 and E==0 and _epsilon==0:
                break
                    
            N = S + E + I + H
            rate1 = (beta * I * S)/N #human to human transmission
            rate2 = (alpha * beta * H * S)/N
            rate3 = _epsilon * S
            rate4 = mu1 * H
            rate5 = mu1 * I
            rate6 = mu * N + mu2 * (I + H)
            rate7 = mu * S
            rate8 = mu * E
            rate9 = mu * I
            rate10 = mu * H
            rate11 = sigma * E
            rate12 = omega * I
            rate13 = mu2 * H
            rate14 = mu2 * I        
                    
            ratemat = [rate1, rate2, rate3, rate4, rate5, rate6, rate7, rate8, rate9, rate10, rate11, rate12, rate13, rate14]
            ratetotal = sum(ratemat)
                    
            dt = -math.log(random.uniform(0,1))/ratetotal #timestep
            t = t + dt
                    
            r=random.uniform(0,1)
                    
            if r < sum(ratemat [:1])/ratetotal: #move to infected class
                S = S - 1
                E = E + 1
                ifh = ifh + 1
                a = a + 1
                        
            elif sum(ratemat [:1])/ratetotal < r and r < sum(ratemat [:2])/ratetotal:
                S = S - 1
                E = E + 1
                ifh = ifh + 1
                a = a + 1
                        
            elif sum(ratemat [:2])/ratetotal < r and r < sum(ratemat [:3])/ratetotal:
                S = S - 1
                E = E + 1
                ifb = ifb + 1
                a = a + 1
                        
            elif sum(ratemat [:3])/ratetotal < r and r < sum(ratemat [:4])/ratetotal:
                H = H - 1
                S = S + 1
                        
            elif sum(ratemat [:4])/ratetotal < r and r < sum(ratemat [:5])/ratetotal:
                I = I - 1
                S = S + 1
                        
            elif sum(ratemat [:5])/ratetotal < r and r < sum(ratemat [:6])/ratetotal:
                S = S + 1
                        
            elif sum(ratemat [:6])/ratetotal < r and r < sum(ratemat [:7])/ratetotal:
                S = S - 1
                        
            elif sum(ratemat [:7])/ratetotal < r and r < sum(ratemat [:8])/ratetotal:
                E = E - 1
                        
            elif sum(ratemat [:8])/ratetotal < r and r < sum(ratemat [:9])/ratetotal:
                I = I - 1
                    
            elif sum(ratemat [:9])/ratetotal < r and r < sum(ratemat [:10])/ratetotal:
                H = H - 1    
                
            elif sum(ratemat [:10])/ratetotal < r and r < sum(ratemat [:11])/ratetotal:
                E = E - 1
                I = I + 1
                
            elif sum(ratemat [:11])/ratetotal < r and r < sum(ratemat [:12])/ratetotal:
                I = I - 1
                H = H + 1
                
            elif sum(ratemat [:12])/ratetotal < r and r < sum(ratemat [:13])/ratetotal:
                H = H - 1
                R = R + 1
                    
            else:
                I = I - 1
                R = R + 1    
                   
                        
            SEIHR.append([t, S, E, I, H, R]) #adds data to SIR matrix
                
                
            timemat.append(t)
                
    #    time = [row[0] for row in SEIHR] #times to be plotted
    #    susceptible = [row[1] for row in SEIHR] #susceptible individuals to be plotted
    #    exposed = [row[2] for row in SEIHR]
    #    infected = [row[3] for row in SEIHR] #infectious individuals to be plotted
    #    hospitalised = [row[4] for row in SEIHR]
    #    dead = [row[5] for row in SEIHR] #dead individuals to be plotted

    #    plt.step(time, exposed, 'b', label='Exposed')
    #    plt.step(time, infected, 'y', label='Infected')
    #    plt.step(time, dead, 'r', label='Dead')
     #   plt.step(time, hospitalised, 'm', label='Hospitalised')
    #    plt.step(time, susceptible, 'g', label='Susceptible')
     #   plt.xlabel('Time in Days (0 = Jan 1st)')
     #   plt.ylabel('Population')
        
    ifbmat.append(ifb)
    ifhmat.append(ifh)
    ifmat.append(ifb+ifh)
    deadmat.append(R)
    
print('Average number of total infections is',np.mean(ifmat))
print('Average number of total infections from bats is',np.mean(ifbmat))
print('Average number of total infections from humans is',np.mean(ifhmat))
print('Average number of deaths is',np.mean(deadmat))
print('Standard deviation of number of total infections is',np.std(ifmat))
print('Standard deviation of number of number of deaths is',np.std(deadmat))

#colors = ['blue', 'yellow', 'magenta', 'red', 'green']
#lines = [Line2D([0], [0], color=c, linewidth=1) for c in colors]
#labels = ['Exposed', 'Infectious', 'Hospitalised', 'Dead', 'Susceptible']
#plt.legend(lines, labels)


#def dSEIHR_dt(X, t):
#    return [mu2*(X[2]+X[3])+mu*N+mu1*(X[3]+X[2])-X[0]*((beta*X[2]/N)+(alpha*beta*X[3]/N)+epsilon+mu),X[0]*(epsilon+(alpha*beta*X[3]/N)+(beta*X[2]/N))-X[1]*(mu+sigma) , sigma*X[1]-X[2]*(mu+mu1+mu2+omega),omega*X[2]-X[3]*(mu+mu1+mu2) ,mu2*(X[3]+X[2])]
#tsolve=np.linspace(0, T, 1000)

#dSEIHR = odeint(dSEIHR_dt, inputSEIHR, tsolve)
#plt.plot(tsolve, dSEIHR, '--', c='k')

#plt.show()